"use strict";(self.webpackChunkgeo_web_docs=self.webpackChunkgeo_web_docs||[]).push([[7100],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return r?n.createElement(g,c(c({ref:t},d),{},{components:r})):n.createElement(g,c({ref:t},d))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,c=new Array(i);c[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1737:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={description:"Documentation for the PCOLicenseClaimerFacetV2 contract."},c="PCOLicenseClaimerFacet",o={unversionedId:"developers/core-contracts/registrydiamond/pcolicenseclaimerfacet",id:"developers/core-contracts/registrydiamond/pcolicenseclaimerfacet",title:"PCOLicenseClaimerFacet",description:"Documentation for the PCOLicenseClaimerFacetV2 contract.",source:"@site/docs/005-developers/002-core-contracts/002-registrydiamond/pcolicenseclaimerfacet.md",sourceDirName:"005-developers/002-core-contracts/002-registrydiamond",slug:"/developers/core-contracts/registrydiamond/pcolicenseclaimerfacet",permalink:"/developers/core-contracts/registrydiamond/pcolicenseclaimerfacet",draft:!1,tags:[],version:"current",frontMatter:{description:"Documentation for the PCOLicenseClaimerFacetV2 contract."},sidebar:"developersSidebar",previous:{title:"Coordinates",permalink:"/developers/core-contracts/registrydiamond/geowebparcelfacet/geo-web-coordinates"},next:{title:"PCOLicenseParamsFacet",permalink:"/developers/core-contracts/registrydiamond/pcolicenseparamsfacet"}},l={},s=[{value:"Summary",id:"summary",level:2},{value:"Code",id:"code",level:2},{value:"Contract Functions",id:"contract-functions",level:2},{value:"PCOLicenseClaimerFacetV2",id:"pcolicenseclaimerfacetv2",level:3},{value:"_buildAndMint",id:"_buildandmint",level:4},{value:"LibPCOLicenseClaimer",id:"libpcolicenseclaimer",level:3},{value:"STORAGE_POSITION",id:"storage_position",level:4},{value:"DiamondStorage",id:"diamondstorage",level:4},{value:"diamondStorage",id:"diamondstorage-1",level:4},{value:"_requiredBid",id:"_requiredbid",level:4}],d={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pcolicenseclaimerfacet"},"PCOLicenseClaimerFacet"),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"PCOLicenseClaimerFacet")," is the action facet that implements the claiming of new Geo Web Land parcels. This includes both the ",(0,a.kt)("a",{parentName:"p",href:"../../../concepts/fair-launch"},"Fair Launch "),"and ongoing claim types."),(0,a.kt)("p",null,"Claiming a parcel requires setting a ",(0,a.kt)("inlineCode",{parentName:"p"},"For Sale Price"),", opening the required Network Fee stream, collecting a stream buffer, defining the shape, and paying a one-time claim payment (during the Fair Launch period)."," "),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Geo-Web-Project/core-contracts/blob/main/contracts/registry/facets/PCOLicenseClaimerFacetV2.sol"},(0,a.kt)("inlineCode",{parentName:"a"},"PCOLicenseClaimerFacetV2.sol"))," "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Geo-Web-Project/core-contracts/blob/main/contracts/registry/libraries/LibPCOLicenseClaimer.sol"},(0,a.kt)("inlineCode",{parentName:"a"},"LibPCOLicenseClaimer.sol"))," "),(0,a.kt)("h2",{id:"contract-functions"},"Contract Functions"),(0,a.kt)("h3",{id:"pcolicenseclaimerfacetv2"},"PCOLicenseClaimerFacetV2"),(0,a.kt)("h4",{id:"_buildandmint"},"_","buildAndMint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function _buildAndMint(address user, struct LibGeoWebParcelV2.LandParcel parcel) internal\n")),(0,a.kt)("p",null,"Build a parcel and mint a license"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"user"),(0,a.kt)("td",{parentName:"tr",align:null},"address"),(0,a.kt)("td",{parentName:"tr",align:null},"Address of license owner to be")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"parcel"),(0,a.kt)("td",{parentName:"tr",align:null},"struct LibGeoWebParcelV2.LandParcel"),(0,a.kt)("td",{parentName:"tr",align:null},"New parcel")))),(0,a.kt)("h3",{id:"libpcolicenseclaimer"},"LibPCOLicenseClaimer"),(0,a.kt)("h4",{id:"storage_position"},"STORAGE_POSITION"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 STORAGE_POSITION\n")),(0,a.kt)("h4",{id:"diamondstorage"},"DiamondStorage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"struct DiamondStorage {\n  uint256 auctionStart;\n  uint256 auctionEnd;\n  uint256 startingBid;\n  uint256 endingBid;\n  address beacon;\n  mapping(uint256 => address) beaconProxies;\n  mapping(address => uint256) userSalts;\n}\n")),(0,a.kt)("h4",{id:"diamondstorage-1"},"diamondStorage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function diamondStorage() internal pure returns (struct LibPCOLicenseClaimer.DiamondStorage ds)\n")),(0,a.kt)("h4",{id:"_requiredbid"},"_","requiredBid"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function _requiredBid() internal view returns (uint256)\n")),(0,a.kt)("p",null,"the current dutch auction price of a parcel."))}u.isMDXComponent=!0}}]);